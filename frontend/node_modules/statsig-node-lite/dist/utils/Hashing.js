"use strict";
exports.__esModule = true;
exports.hashUnitIDForIDList = exports.hashString = exports.sha256Hash = exports.sha256HashBase64 = exports.djb2HashForObject = exports.djb2Hash = void 0;
var Base64_1 = require("./Base64");
var Sha256_1 = require("./Sha256");
function fasthash(value) {
    var hash = 0;
    for (var i = 0; i < value.length; i++) {
        var character = value.charCodeAt(i);
        hash = (hash << 5) - hash + character;
        hash = hash & hash; // Convert to 32bit integer
    }
    return hash;
}
function djb2Hash(value) {
    return String(fasthash(value) >>> 0);
}
exports.djb2Hash = djb2Hash;
function djb2HashForObject(object) {
    return djb2Hash(JSON.stringify(getSortedObject(object)));
}
exports.djb2HashForObject = djb2HashForObject;
function sha256HashBase64(name) {
    var buffer = (0, Sha256_1.SHA256)(name);
    return Base64_1.Base64.encodeArrayBuffer(buffer.arrayBuffer());
}
exports.sha256HashBase64 = sha256HashBase64;
function sha256Hash(name) {
    return (0, Sha256_1.SHA256)(name).dataView();
}
exports.sha256Hash = sha256Hash;
function hashString(str, algorithm) {
    if (algorithm === void 0) { algorithm = 'sha256'; }
    switch (algorithm) {
        case 'sha256':
            return sha256HashBase64(str);
        case 'djb2':
            return djb2Hash(str);
        default:
            return str;
    }
}
exports.hashString = hashString;
function hashUnitIDForIDList(unitID, algorithm) {
    if (typeof unitID !== 'string' || unitID == null) {
        return '';
    }
    return hashString(unitID, algorithm).substr(0, 8);
}
exports.hashUnitIDForIDList = hashUnitIDForIDList;
function getSortedObject(object) {
    if (object == null) {
        return null;
    }
    var keys = Object.keys(object).sort();
    var sortedObject = {};
    keys.forEach(function (key) {
        var value = object[key];
        if (value instanceof Object) {
            value = getSortedObject(value);
        }
        sortedObject[key] = value;
    });
    return sortedObject;
}
